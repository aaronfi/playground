package MyKata;

import java.util.HashSet;
import java.util.Set;

public class Boggle {
    
    //  12 13 14 15
    //  8  9  10 11
    //  4  5  6  7
    //  0  1  2  3 
    //
    //  0 --> [1,4,5]
    //  1 --> [0,2,4,5,6]
    //  2 --> [1,3,5,6,7]
    //  3 --> [2,6,7]
    //  4 --> [0,1,5,8,9]
    //  5 --> [0,1,2,4,6,8,9,10]
    //  6 --> [1,2,3,5,7,9,10,11]
    //  7 --> [2,3,6,10,11]
    //  8 --> [4,5,9,12,13]
    //  9 --> [4,5,6,8,10,12,13,14]
    //  10 -> [5,6,7,9,11,13,14,15]
    //  11 -> [6,7,10,14,15]
    //  12 -> [8,9,13]
    //  13 -> [8,9,10,12,14]
    //  14 -> [9,10,11,13,15]
    //  15 -> [10,11,14]
        
    public static int[] getNeighbors(int i) {
        
        // thought about hard-coding a static Map<>, so I don't have to
        // re-create these array values each time.  But then I'd have to deal with Map<Integer,List<Integer>>, so meh... 
        switch (i) {
            case 0:   return new int[] { 1,4,5 };
            case 1:   return new int[] { 0,2,4,5,6 };
            case 2:   return new int[] { 1,3,5,6,7 };
            case 3:   return new int[] { 2,6,7 };
            case 4:   return new int[] { 0,1,5,8,9 };
            case 5:   return new int[] { 0,1,2,4,6,8,9,10 };
            case 6:   return new int[] { 1,2,3,5,7,9,10,11 };
            case 7:   return new int[] { 2,3,6,10,11 };
            case 8:   return new int[] { 4,5,9,12,13 };
            case 9:   return new int[] { 5,6,7,9,11,13,14,15 };
            case 10:  return new int[] { 6,7,10,14,15 };
            case 11:  return new int[] { 8,9,13 };
            case 12:  return new int[] { 8,9,10,12,14 };
            case 13:  return new int[] { 9,10,11,13,15 };
            case 14:  return new int[] { 9,10,11,13,15 };
            case 15:  return new int[] { 10,11,14 };
            default:  return new int[] {};
        }        
    }
    
    public static void solve(final char[] board) {
        Set<String> foundWords = new HashSet<String>();
        for(int i=0; i<16; i++) {
            boolean[] visited = new boolean[16];
            visited[i] = true;
            process(board, i, visited, String.valueOf(board[i]), foundWords);
        }
    }
    
    public static boolean isValidWord(String word) {
        // poor man's dictionary, for now...
        return "STAR".equals(word) || "TAR".equals(word) || "TAX".equals(word) || "TAXED".equals(word) || "AXE".equals(word) || "AXED".equals(word);
    }
    
    public static boolean isValidWordPrefix(String word) {
        // poor man's dictionary word prefix, for now...
        return isValidWord(word) 
                || "S".equals(word) || "ST".equals(word) || "STA".equals(word) 
                || "T".equals(word) || "TA".equals(word) || "TAX".equals(word) || "TAXE".equals(word)
                || "A".equals(word) || "AX".equals(word) || "AXE".equals(word);
    }
    
    public static void process(final char[] board, int curr, boolean[] visited, String currentCandidateWord, Set<String> foundWords) {
        for(int i: getNeighbors(curr)) {
            if (! visited[i]) {
                String newCandidateWord = currentCandidateWord + String.valueOf(board[i]);
                if (newCandidateWord.length() >= 3 && isValidWord(newCandidateWord) && ! foundWords.contains(newCandidateWord)) {
                    foundWords.add(newCandidateWord);
                    System.out.println("word found:  " + newCandidateWord);
                }
                boolean[] newVisited = visited.clone();
                newVisited[i] = true;
                if (isValidWordPrefix(newCandidateWord)) {
                    process(board, i, newVisited, newCandidateWord, foundWords);
                }
            }
        }
    }
    
    public static void main(String[] args) {
        //  X X D X
        //  X X E X
        //  X X X X
        //  S T A R
        char[] board = new char[] { 'S', 'T', 'A', 'R', 'X', 'X', 'X', 'X', 'X', 'X', 'E', 'X', 'X', 'X', 'D', 'X' };
        solve(board);
    }
}
